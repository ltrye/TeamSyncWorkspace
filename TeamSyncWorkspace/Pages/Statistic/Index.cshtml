@page
@model IndexModel
@{
    ViewData["Title"] = "Statistic";
}

<style>
    .container {
        max-width: 1200px;
        margin: auto;
    }

    .chart-container {
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        border-radius: 12px;
        overflow: hidden;
        background: white;
        padding: 20px;
        transition: all 0.3s ease-in-out;
    }

        .chart-container:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
        }

    .card-header {
        background: linear-gradient(135deg, #42A5F5, #1E88E5);
        color: white;
        font-size: 18px;
        font-weight: bold;
        text-align: center;
        padding: 12px;
        border-top-left-radius: 12px;
        border-top-right-radius: 12px;
    }

    #taskStatusChart {
        width: 300px !important;
        height: 300px !important;
        display: block !important;
    }

    .week-nav {
        text-align: center;
        margin-bottom: 20px;
    }

        .week-nav button {
            background: #1976D2;
            color: white;
            border: none;
            padding: 8px 16px;
            font-size: 16px;
            border-radius: 6px;
            cursor: pointer;
            margin: 5px;
            transition: 0.3s;
        }

            .week-nav button:hover {
                background: #1565C0;
            }
    /* Sidebar */
    .sidebar {
        background: linear-gradient(135deg, #ffffff, #f3f3f3);
        padding: 24px;
        border-radius: 12px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        height: 100%;
        position: sticky;
        top: 20px;
        width: 250px;
        transition: all 0.3s ease-in-out;
    }

        .sidebar ul {
            list-style: none;
            padding-left: 0;
        }

            .sidebar ul li {
                margin-bottom: 14px;
                padding: 10px 16px;
                border-radius: 8px;
                transition: background 0.3s ease-in-out;
            }

                .sidebar ul li a {
                    text-decoration: none;
                    color: #222;
                    font-weight: 600;
                    font-size: 18px;
                    display: flex;
                    align-items: center;
                    gap: 10px;
                    transition: color 0.3s ease-in-out;
                }

                /* Hover hiệu ứng đẹp hơn */
                .sidebar ul li:hover {
                    background: #e8f5e9;
                }

                .sidebar ul li a:hover {
                    color: #2e7d32;
                }

                /* Icon (nếu có) */
                .sidebar ul li a i {
                    font-size: 20px;
                    color: #4CAF50;
                }

    /* Responsive */
    
        .sidebar

    {
        width: 200px;
        padding: 16px;
    }

    .sidebar ul li a {
        font-size: 16px;
    }

    }
</style>
<!-- Sidebar -->
<div class="container mt-4">
    <div class="row">
        <!-- Left Sidebar -->
        <div class="col-md-3">
            <div class="sidebar">
                <h5>Timeline Task</h5>
                <ul>
                    <li><a href="/Statistic/TaskList/TaskList?workspaceId=@Model.WorkspaceId">Task List</a></li>
                    <li><a href="/Statistic?workspaceId=@Model.WorkspaceId">Statistic</a></li>
                    <li><a href="/Dashboard/Timeline/Index?workspaceId=@Model.WorkspaceId">TimeLine</a></li>
                </ul>
            </div>
        </div>
        <!-- Main Content (Right Side) -->
        <div class="col-md-9">
            <h2 class="text-center mt-4">📊 Task Statistics</h2>
            @if (Model.Workspace != null)
            {
                <p class="text-center font-weight-bold">📌 Workspace: @Model.Workspace.WorkspaceName</p>
            }
            else
            {
                <p class="text-center font-weight-bold">📌 Workspace not found</p>
            }

            <!-- Week Navigation Buttons -->
            <div class="week-nav">
                <button onclick="changeWeek(-1)">⬅ Previous Week</button>
                <span id="currentWeekLabel"></span>
                <button onclick="changeWeek(1)">Next Week ➡</button>
            </div>

            <div class="container mt-5">
                <div class="row d-flex justify-content-center align-items-center">
                    <div class="col-md-6">
                        <div class="card chart-container">
                            <div class="card-header text-center">
                                <h4>📌 Task Status</h4>
                            </div>
                            <div class="card-body">
                                <canvas id="taskStatusChart"></canvas>
                            </div>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <div class="card chart-container">
                            <div class="card-header text-center">
                                <h4>👥 Member Tasks</h4>
                            </div>
                            <div class="card-body">
                                <canvas id="memberTaskChart"></canvas>
                            </div>
                        </div>
                    </div>
                    <!-- Thêm nút xuất Excel -->
                    <div class="text-center mt-3">
                        <button onclick="exportTaskStatistics()" class="btn btn-info">📊 Export Task Statistics</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<!-- Thêm thư viện SheetJS -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>

<script>
    
   

    async function exportTaskStatistics() {
        try {
            const workspaceId = "@Model.WorkspaceId";
            const formattedDate = currentWeekStart.toISOString().split("T")[0];

            const [taskDataResponse, memberTaskResponse] = await Promise.all([
                fetch(`/api/statistics/task-status/${workspaceId}?startDate=${formattedDate}`),
                fetch(`/api/statistics/member-tasks/${workspaceId}?startDate=${formattedDate}`)
            ]);

            if (!taskDataResponse.ok || !memberTaskResponse.ok) {
                throw new Error("Error fetching data.");
            }

            const taskData = await taskDataResponse.json();
            const memberTasks = await memberTaskResponse.json();

            // Chuẩn bị dữ liệu Excel
            let ws_data = [["Task Status", "Count"], ...taskData.map(t => [t.label, t.count])];
            let ws_member = [["Member", "Task Percentage (%)"], ...memberTasks.map(m => [m.name, m.percentage])];

            let ws1 = XLSX.utils.aoa_to_sheet(ws_data);
            let ws2 = XLSX.utils.aoa_to_sheet(ws_member);

            let wb = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(wb, ws1, "Task Status");
            XLSX.utils.book_append_sheet(wb, ws2, "Member Tasks");

            XLSX.writeFile(wb, "Task_Statistics.xlsx");
        } catch (error) {
            console.error("❌ Export Error:", error);
            alert("Failed to export statistics!");
        }
    }
</script>
<!-- Bootstrap & Chart.js -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    // Get Monday of the current week
    function getMonday(d) {
        d = new Date(d);
        d.setHours(0, 0, 0, 0);
        const day = d.getDay();
        const diff = day === 0 ? -6 : 1 - day; // If Sunday, move back to the previous Monday
        d.setDate(d.getDate() + diff);
        return d;
    }

    let currentWeekStart = getMonday(new Date());

    document.addEventListener("DOMContentLoaded", function () {
        updateCharts(currentWeekStart);
    });

    function changeWeek(offset) {
        currentWeekStart.setDate(currentWeekStart.getDate() + offset * 7);
        updateCharts(currentWeekStart);
    }

    async function updateCharts(startDate) {
        const workspaceId = "@Model.WorkspaceId";
        const formattedDate = startDate.toISOString().split("T")[0];
        document.getElementById("currentWeekLabel").innerText = `📆 Week starting: ${formattedDate}`;

        try {
            const [taskDataResponse, memberTaskResponse] = await Promise.all([
                fetch(`/api/statistics/task-status/${workspaceId}?startDate=${formattedDate}`),
                fetch(`/api/statistics/member-tasks/${workspaceId}?startDate=${formattedDate}`)
            ]);

            if (!taskDataResponse.ok || !memberTaskResponse.ok) {
                throw new Error("Error loading data from API.");
            }

            const taskData = await taskDataResponse.json();
            const memberTasks = await memberTaskResponse.json();

            console.log("Task Data:", taskData);
            console.log("Member Tasks:", memberTasks);

            // Hide chart if no data
            if (!taskData || taskData.length === 0) {
                console.warn("No task status data available.");
                document.getElementById("taskStatusChart").style.display = "none";
                return;
            } else {
                document.getElementById("taskStatusChart").style.display = "block";
            }

            if (window.taskStatusChart instanceof Chart) {
                window.taskStatusChart.destroy();
            }

            // Draw Pie Chart (Task Status)
            const ctxPie = document.getElementById("taskStatusChart").getContext("2d");
            window.taskStatusChart = new Chart(ctxPie, {
                type: "pie",
                data: {
                    labels: taskData.map(t => t.label),
                    datasets: [{
                        data: taskData.map(t => t.count),
                        backgroundColor: ["#4CAF50", "#E91E63", "#2196F3"],
                        borderWidth: 2,
                        hoverOffset: 8
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: { position: "right" },
                        tooltip: { enabled: true }
                    },
                    onClick: (event, elements) => {
                        if (elements.length > 0) {
                            const index = elements[0].index;
                            const memberId = taskData[index].label;
                            window.location.href = `Statistic/TaskList/TaskList?WorkspaceId=${workspaceId}&FilterType=status&FilterValue=${memberId}`;
                        }
                    }
                }
            });

            // Draw Bar Chart (Member Tasks)
            if (window.memberTaskChart instanceof Chart) {
                window.memberTaskChart.destroy();
            }

            const ctxBar = document.getElementById("memberTaskChart").getContext("2d");
            window.memberTaskChart = new Chart(ctxBar, {
                type: "bar",
                data: {
                    labels: memberTasks.map(m => m.name),
                    datasets: [{
                        label: "Task Percentage (%)",
                        data: memberTasks.map(m => m.percentage),
                        backgroundColor: "#FF9800",
                        borderRadius: 8,
                        barThickness: 40
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: { beginAtZero: true },
                        x: { ticks: { color: "#333", font: { weight: "bold" } } }
                    },
                    onClick: (event, elements) => {
                        if (elements.length > 0) {
                            const index = elements[0].index;
                            const memberId = memberTasks[index].name;
                            window.location.href = `Statistic/TaskList/TaskList?WorkspaceId=${workspaceId}&FilterType=member&FilterValue=${memberId}`;
                        }
                    }
                }
            });

        } catch (error) {
            console.error("❌ Error loading data:", error);
            alert("Unable to load data. Please try again later!");
        }
    }
</script>


