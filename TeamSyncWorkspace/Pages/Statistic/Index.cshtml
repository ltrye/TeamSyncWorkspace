@page
@model IndexModel
@{
    ViewData["Title"] = "Thống kê";
}
<style>
    /* Tổng thể */
    .container {
        max-width: 1200px;
        margin: auto;
    }

    /* Thẻ card chứa biểu đồ */
    .chart-container {
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        border-radius: 12px;
        overflow: hidden;
        background: white;
        padding: 20px;
        transition: all 0.3s ease-in-out;
    }

        .chart-container:hover {
            transform: translateY(-5px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.2);
        }

    /* Header của card */
    .card-header {
        background: linear-gradient(135deg, #42A5F5, #1E88E5);
        color: white;
        font-size: 18px;
        font-weight: bold;
        text-align: center;
        padding: 12px;
        border-top-left-radius: 12px;
        border-top-right-radius: 12px;
    }

    /* Điều chỉnh canvas */
    canvas {
        width: 100% !important;
        height: 280px !important;
        display: block;
    }

    /* Hiệu ứng tooltip */
    .chartjs-tooltip {
        background: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 8px;
        border-radius: 8px;
    }

    /* Responsive */
  

    {
        flex-direction: column;
    }

    .col-md-6 {
        width: 100%;
    }

    }
</style>
<h2 class="text-center mt-4">📊 Thống kê Công Việc</h2>
@if (Model.Workspace != null)
{
    <p class="text-center font-weight-bold">📌 Workspace: @Model.Workspace.WorkspaceName</p>
}
else
{
    <p class="text-center font-weight-bold">📌 Workspace not found</p>
}
<div class="container mt-5">
    <div class="row d-flex justify-content-center align-items-center">
        <!-- Biểu đồ Trạng thái Task (Trái) -->
        <div class="col-md-6">
            <div class="card chart-container">
                <div class="card-header text-center">
                    <h4>📌 Trạng thái Công Việc</h4>
                </div>
                <div class="card-body">
                    <canvas id="taskStatusChart"></canvas>
                </div>
            </div>
        </div>

        <!-- Biểu đồ Công việc của Thành viên (Phải) -->
        <div class="col-md-6">
            <div class="card chart-container">
                <div class="card-header text-center">
                    <h4>👥 Công Việc Của Thành Viên</h4>
                </div>
                <div class="card-body">
                    <canvas id="memberTaskChart"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>


<!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

<!-- Chart.js CDN -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    document.addEventListener("DOMContentLoaded", async function () {
        const workspaceId = "@Model.WorkspaceId"; // Truyền từ Razor vào JS

        try {
            const taskDataResponse = await fetch(`/api/statistics/task-status/${workspaceId}`);
            const taskData = await taskDataResponse.json();

            const memberTaskResponse = await fetch(`/api/statistics/member-tasks/${workspaceId}`);
            const memberTasks = await memberTaskResponse.json();

            console.log("Task Data:", taskData);
            console.log("Member Tasks:", memberTasks);

            // Khởi tạo gradient màu sắc cho Pie Chart
            const ctxPie = document.getElementById("taskStatusChart").getContext("2d");
            const pieGradient1 = ctxPie.createLinearGradient(0, 0, 0, 400);
            pieGradient1.addColorStop(0, "#4CAF50");
            pieGradient1.addColorStop(1, "#8BC34A");

            const pieGradient2 = ctxPie.createLinearGradient(0, 0, 0, 400);
            pieGradient2.addColorStop(0, "#E91E63");
            pieGradient2.addColorStop(1, "#FF4081");

            const pieGradient3 = ctxPie.createLinearGradient(0, 0, 0, 400);
            pieGradient3.addColorStop(0, "#2196F3");
            pieGradient3.addColorStop(1, "#64B5F6");

            // Biểu đồ tròn (Pie Chart) cho trạng thái task
            const taskStatusChart = new Chart(ctxPie, {
                type: "pie",
                data: {
                    labels: taskData.map(t => t.label),
                    datasets: [{
                        data: taskData.map(t => t.value),
                        backgroundColor: [pieGradient1, pieGradient2, pieGradient3],
                        borderWidth: 2,
                        hoverOffset: 8
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        legend: {
                            position: "right",
                            onClick: function (e, legendItem) {
                                // Lấy label từ legendItem và chuyển hướng
                                const label = legendItem.text;
                                window.location.href = `Statistic/TaskList/TaskList?WorkspaceId=${workspaceId}&FilterType=status&FilterValue=${label}`;
                            }
                        },
                        tooltip: { enabled: true, backgroundColor: "#000", titleColor: "#fff", bodyColor: "#fff" }
                    },
                    animation: {
                        animateScale: true,
                        animateRotate: true
                    },
                    // Thêm sự kiện nhấp chuột cho các phần của Pie Chart
                    onClick: function (e, elements) {
                        if (elements.length > 0) {
                            const index = elements[0].index;
                            const label = this.data.labels[index];
                            window.location.href = `Statistic/TaskList/TaskList?WorkspaceId=${workspaceId}&FilterType=status&FilterValue=${label}`;
                        }
                    }
                }
            });

            // Gradient cho biểu đồ cột
            const ctxBar = document.getElementById("memberTaskChart").getContext("2d");
            const barGradient = ctxBar.createLinearGradient(0, 0, 0, 400);
            barGradient.addColorStop(0, "#FF9800");
            barGradient.addColorStop(1, "#FF5722");

            // Biểu đồ cột (Bar Chart) cho công việc của thành viên
            const memberTaskChart = new Chart(ctxBar, {
                type: "bar",
                data: {
                    labels: memberTasks.map(m => m.name),
                    datasets: [{
                        label: "Phần trăm công việc (%)",
                        data: memberTasks.map(m => m.percentage),
                        backgroundColor: barGradient,
                        borderRadius: 8,
                        barThickness: 40
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: { color: "#333", font: { weight: "bold" } }
                        },
                        x: {
                            ticks: { color: "#333", font: { weight: "bold" } }
                        }
                    },
                    plugins: {
                        legend: { display: false },
                        tooltip: { enabled: true, backgroundColor: "#222", titleColor: "#fff", bodyColor: "#fff" }
                    },
                    animation: {
                        duration: 1000,
                        easing: "easeInOutBounce"
                    },
                    // Thêm sự kiện nhấp chuột cho các cột trong Bar Chart
                    onClick: function (e, elements) {
                        if (elements.length > 0) {
                            const index = elements[0].index;
                            const label = this.data.labels[index];
                            window.location.href = `/Statistic/TaskList/TaskList?WorkspaceId=${workspaceId}&FilterType=member&FilterValue=${label}`;
                        }
                    }
                }
            });

        } catch (error) {
            console.error("Lỗi khi tải dữ liệu:", error);
        }
    });
</script>

