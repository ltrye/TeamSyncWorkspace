<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - TeamSyncWorkspace</title>
    <link rel="stylesheet" href="~/lib/bulma/css/bulma.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/TeamSyncWorkspace.styles.css" asp-append-version="true" />
    @await RenderSectionAsync("Styles", required: false)
    @await RenderSectionAsync("Head", required: false)
</head>

<body class="editor-body" style="margin:0px">
    @Html.AntiForgeryToken()


    <!-- Main content area -->
    <main role="main" >
        @RenderBody()
    </main>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Common modal functionality
            setupModals();
        });

        function setupModals() {
            // Functions to open and close a modal
            function openModal($el) {
                $el.classList.add('is-active');
            }

            function closeModal($el) {
                $el.classList.remove('is-active');
            }

            function closeAllModals() {
                (document.querySelectorAll('.modal') || []).forEach(($modal) => {
                    closeModal($modal);
                });
            }

            // Add a click event on buttons to open a specific modal
            (document.querySelectorAll('.js-modal-trigger') || []).forEach(($trigger) => {
                const modal = $trigger.dataset.target;
                const $target = document.getElementById(modal);

                $trigger.addEventListener('click', () => {
                    openModal($target);
                });
            });

            // Add a click event on various child elements to close the parent modal
            (document.querySelectorAll('.modal-background, .modal-card-head .delete, .modal-card-foot .button.is-light') || []).forEach(($close) => {
                const $target = $close.closest('.modal');

                $close.addEventListener('click', () => {
                    closeModal($target);
                });
            });

            // Add keyboard event to close all modals
            document.addEventListener('keydown', (event) => {
                if (event.keyCode === 27) { // Escape key
                    closeAllModals();
                }
            });

            // Delete notification functionality
            (document.querySelectorAll('.notification .delete') || []).forEach(($delete) => {
                const $notification = $delete.parentNode;
                $delete.addEventListener('click', () => {
                    $notification.parentNode.removeChild($notification);
                });
            });
        }
    </script>

    <script src="~/microsoft-signalr/signalr.min.js"></script>
    
    <!-- Keep the SignalR notification hub for receiving real-time notifications -->
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            setupNotificationSignalR();
        });

        function setupNotificationSignalR() {
            @if (User.Identity.IsAuthenticated) {
                <text>
                    const userId = '@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value';
                    const connection = new signalR.HubConnectionBuilder()
                    .withUrl("/notificationHub")
                    .withAutomaticReconnect()
                    .build();

                    connection.on("ReceiveNotification", function(notification) {
                        // Show browser notification if permission granted
                        if (Notification.permission === "granted") {
                            const browserNotification = new Notification("TeamSyncWorkspace", {
                                body: notification.title,
                                icon: "/favicon.ico"
                            });

                            browserNotification.onclick = function() {
                                window.focus();
                                if (notification.link) {
                                    window.location.href = notification.link;
                                } else {
                                    window.location.href = "/Notifications/View/" + notification.id;
                                }
                            };
                        }
                    });

                    connection.start().then(function() {
                        connection.invoke("JoinUserGroup", userId).catch(function (err) {
                            console.error(err.toString());
                        });
                    }).catch(function(err) {
                        console.error(err.toString());
                    });

                    // Request notification permission
                    if (Notification.permission !== "granted" && Notification.permission !== "denied") {
                        Notification.requestPermission();
                    }
                </text>
            }
        }
    </script>

    @await RenderSectionAsync("Scripts", required: false)
</body>

</html>