@page
@model TeamSyncWorkspace.Pages.HomeModel
@{
    ViewData["Title"] = "Welcome to TeamSyncWorkspace";
}

<div class="container-fluid p-0">
    <!-- Hero Section -->
    <section class="hero is-medium is-primary">
        <div class="hero-body">
            <div class="container">
                <div class="columns is-vcentered">
                    <div class="column is-6">
                        <h1 class="title is-2 mb-4">Collaborate Seamlessly with Your Team</h1>
                        <p class="subtitle is-4 mb-5">TeamSyncWorkspace brings together documents, tasks, and team communication in one unified platform.</p>
                        <div class="buttons">
                            <a href="/Account/Register" class="button is-white is-medium">Get Started</a>
                            <a href="/Account/Login" class="button is-outlined is-white is-medium">Sign In</a>
                        </div>
                    </div>
                    <div class="column is-6 is-hidden-touch">
                        <div id="animated-svg-container" class="has-background-white is-rounded box p-0 overflow-hidden">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 800 500" width="100%" height="400" id="interactive-svg">
                                <!-- Background -->
                                <rect width="800" height="500" fill="#f9fafb" />
                                
                                <!-- Grid lines -->
                                <g class="grid-lines">
                                    <line x1="100" y1="0" x2="100" y2="500" stroke="#f0f0f0" stroke-width="1" />
                                    <line x1="200" y1="0" x2="200" y2="500" stroke="#f0f0f0" stroke-width="1" />
                                    <line x1="300" y1="0" x2="300" y2="500" stroke="#f0f0f0" stroke-width="1" />
                                    <line x1="400" y1="0" x2="400" y2="500" stroke="#f0f0f0" stroke-width="1" />
                                    <line x1="500" y1="0" x2="500" y2="500" stroke="#f0f0f0" stroke-width="1" />
                                    <line x1="600" y1="0" x2="600" y2="500" stroke="#f0f0f0" stroke-width="1" />
                                    <line x1="700" y1="0" x2="700" y2="500" stroke="#f0f0f0" stroke-width="1" />
                                    
                                    <line x1="0" y1="100" x2="800" y2="100" stroke="#f0f0f0" stroke-width="1" />
                                    <line x1="0" y1="200" x2="800" y2="200" stroke="#f0f0f0" stroke-width="1" />
                                    <line x1="0" y1="300" x2="800" y2="300" stroke="#f0f0f0" stroke-width="1" />
                                    <line x1="0" y1="400" x2="800" y2="400" stroke="#f0f0f0" stroke-width="1" />
                                </g>
                                
                                <!-- Workspace elements -->
                                <g class="workspace-elements">
                                    <!-- Central workspace area -->
                                    <rect x="200" y="100" width="400" height="300" rx="8" fill="#f0f4ff" stroke="#4a68bd" stroke-width="2" class="workspace" />
                                    
                                    <!-- Document icons -->
                                    <g class="document" transform="translate(300, 150)">
                                        <rect x="0" y="0" width="60" height="80" rx="4" fill="white" stroke="#4a68bd" stroke-width="1.5" />
                                        <line x1="10" y1="20" x2="50" y2="20" stroke="#4a68bd" stroke-width="1.5" />
                                        <line x1="10" y1="35" x2="50" y2="35" stroke="#4a68bd" stroke-width="1.5" />
                                        <line x1="10" y1="50" x2="50" y2="50" stroke="#4a68bd" stroke-width="1.5" />
                                        <line x1="10" y1="65" x2="30" y2="65" stroke="#4a68bd" stroke-width="1.5" />
                                    </g>
                                    
                                    <g class="chart" transform="translate(440, 150)">
                                        <rect x="0" y="0" width="60" height="80" rx="4" fill="white" stroke="#3a9e6d" stroke-width="1.5" />
                                        <line x1="10" y1="20" x2="50" y2="20" stroke="#3a9e6d" stroke-width="1" />
                                        <rect x="10" y1="30" width="10" height="40" fill="#3a9e6d" />
                                        <rect x="25" y1="40" width="10" height="30" fill="#3a9e6d" />
                                        <rect x="40" y1="35" width="10" height="35" fill="#3a9e6d" />
                                    </g>
                                    
                                    <!-- Task cards -->
                                    <g class="task-card" transform="translate(300, 260)">
                                        <rect x="0" y="0" width="200" height="100" rx="4" fill="white" stroke="#e5e5e5" stroke-width="1.5" />
                                        <circle cx="20" cy="20" r="10" fill="#4a68bd" opacity="0.2" class="avatar" />
                                        <circle cx="50" cy="20" r="10" fill="#3a9e6d" opacity="0.2" class="avatar" />
                                        <circle cx="80" cy="20" r="10" fill="#f0ad4e" opacity="0.2" class="avatar" />
                                        <line x1="20" y1="50" x2="180" y2="50" stroke="#f0f0f0" stroke-width="1.5" />
                                        <rect x="20" y="70" width="120" height="10" rx="2" fill="#f0f4ff" />
                                        <rect x="20" y="70" width="80" height="10" rx="2" fill="#4a68bd" class="progress-bar" />
                                    </g>
                                    
                                    <!-- People icons (simplified) -->
                                    <g class="people-icons">
                                        <circle cx="170" cy="150" r="25" fill="#4a68bd" opacity="0.8" class="person" />
                                        <circle cx="170" cy="250" r="25" fill="#3a9e6d" opacity="0.8" class="person" />
                                        <circle cx="170" cy="350" r="25" fill="#f0ad4e" opacity="0.8" class="person" />
                                        
                                        <circle cx="630" cy="150" r="25" fill="#4a68bd" opacity="0.8" class="person" />
                                        <circle cx="630" cy="250" r="25" fill="#3a9e6d" opacity="0.8" class="person" />
                                        <circle cx="630" cy="350" r="25" fill="#f0ad4e" opacity="0.8" class="person" />
                                    </g>
                                    
                                    <!-- Connection lines -->
                                    <g class="connection-lines">
                                        <path d="M195,150 C250,150 250,120 300,120" stroke="#4a68bd" stroke-width="2" fill="none" class="connection" />
                                        <path d="M195,250 C250,250 250,300 300,300" stroke="#3a9e6d" stroke-width="2" fill="none" class="connection" />
                                        <path d="M195,350 C250,350 250,330 300,330" stroke="#f0ad4e" stroke-width="2" fill="none" class="connection" />
                                        
                                        <path d="M605,150 C550,150 550,120 500,120" stroke="#4a68bd" stroke-width="2" fill="none" class="connection" />
                                        <path d="M605,250 C550,250 550,300 500,300" stroke="#3a9e6d" stroke-width="2" fill="none" class="connection" />
                                        <path d="M605,350 C550,350 550,330 500,330" stroke="#f0ad4e" stroke-width="2" fill="none" class="connection" />
                                    </g>
                                    
                                    <!-- Floating notifications -->
                                    <g class="notification" transform="translate(230, 80)" opacity="0">
                                        <rect x="0" y="0" width="120" height="30" rx="15" fill="#4a68bd" />
                                        <text x="60" y="19" font-family="Arial" font-size="12" fill="white" text-anchor="middle">New Document</text>
                                    </g>
                                    
                                    <g class="notification" transform="translate(450, 80)" opacity="0">
                                        <rect x="0" y="0" width="120" height="30" rx="15" fill="#3a9e6d" />
                                        <text x="60" y="19" font-family="Arial" font-size="12" fill="white" text-anchor="middle">Task Completed</text>
                                    </g>
                                </g>
                            </svg>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Features Section -->
    <section class="section">
        <div class="container">
            <h2 class="title is-3 has-text-centered mb-6">Everything Your Team Needs</h2>
            <div class="columns is-multiline">
                <div class="column is-4">
                    <div class="box has-shadow h-100">
                        <div class="has-text-centered mb-4">
                            <span class="icon-large has-text-info">
                                <i class="bi bi-people-fill"></i>
                            </span>
                        </div>
                        <h3 class="title is-4 has-text-centered mb-3">Team Management</h3>
                        <p class="has-text-centered has-text-grey">Create teams, assign roles, and collaborate with colleagues efficiently.</p>
                    </div>
                </div>
                <div class="column is-4">
                    <div class="box has-shadow h-100">
                        <div class="has-text-centered mb-4">
                            <span class="icon-large has-text-success">
                                <i class="bi bi-file-earmark-text"></i>
                            </span>
                        </div>
                        <h3 class="title is-4 has-text-centered mb-3">Document Collaboration</h3>
                        <p class="has-text-centered has-text-grey">Work together on documents in real-time with version control.</p>
                    </div>
                </div>
                <div class="column is-4">
                    <div class="box has-shadow h-100">
                        <div class="has-text-centered mb-4">
                            <span class="icon-large has-text-link">
                                <i class="bi bi-calendar-check"></i>
                            </span>
                        </div>
                        <h3 class="title is-4 has-text-centered mb-3">Task Management</h3>
                        <p class="has-text-centered has-text-grey">Organize team tasks, track progress, and meet deadlines.</p>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- How It Works Section -->
    <section class="section has-background-white-bis">
        <div class="container">
            <h2 class="title is-3 has-text-centered mb-6">How It Works</h2>
            <div class="columns">
                <div class="column is-3">
                    <div class="box has-shadow has-text-centered">
                        <div class="step-circle mb-4">1</div>
                        <h4 class="title is-5 mb-3">Create Account</h4>
                        <p class="has-text-grey">Sign up with email or Google authentication.</p>
                    </div>
                </div>
                <div class="column is-3">
                    <div class="box has-shadow has-text-centered">
                        <div class="step-circle mb-4">2</div>
                        <h4 class="title is-5 mb-3">Create a Team</h4>
                        <p class="has-text-grey">Set up your workspace and invite team members.</p>
                    </div>
                </div>
                <div class="column is-3">
                    <div class="box has-shadow has-text-centered">
                        <div class="step-circle mb-4">3</div>
                        <h4 class="title is-5 mb-3">Add Content</h4>
                        <p class="has-text-grey">Create documents, upload files, set tasks.</p>
                    </div>
                </div>
                <div class="column is-3">
                    <div class="box has-shadow has-text-centered">
                        <div class="step-circle mb-4">4</div>
                        <h4 class="title is-5 mb-3">Collaborate</h4>
                        <p class="has-text-grey">Work together with your team in real-time.</p>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- CTA Section -->
    <section class="section has-background-primary">
        <div class="container has-text-centered">
            <h2 class="title is-3 has-text-white mb-5">Ready to boost your team's productivity?</h2>
            <a href="/Account/Register" class="button is-white is-medium is-outlined px-5">Get Started For Free</a>
        </div>
    </section>
</div>

@section Styles {
    <style>
        .hero {
            background-color: #4a68bd;
        }
        
        .hero.is-primary {
            background-color: #4a68bd;
        }
        
        .section.has-background-primary {
            background-color: #4a68bd;
        }
        
        .h-100 {
            height: 100%;
        }
        
        .step-circle {
            display: flex;
            align-items: center;
            justify-content: center;
            width: 4rem;
            height: 4rem;
            border-radius: 50%;
            background-color: #4a68bd;
            color: white;
            font-size: 1.5rem;
            font-weight: bold;
            margin: 0 auto;
        }
        
        .box {
            transition: transform 0.3s ease;
        }
        
        .box:hover {
            transform: translateY(-5px);
        }
        
        .overflow-hidden {
            overflow: hidden;
        }
        
        /* SVG Animation Styles */
        .connection {
            stroke-dasharray: 200;
            stroke-dashoffset: 0;
        }
        
        .workspace {
            transform-origin: center;
        }
        
        .person {
            cursor: pointer;
            transform-origin: center;
            transition: opacity 0.3s, transform 0.3s;
        }
        
        .document, .chart, .task-card {
            transform-origin: center;
        }
        
        .progress-bar {
            transform-origin: left;
        }
        
        .grid-lines line {
            opacity: 0.3;
        }
        
        /* Round the corners of the SVG container */
        .is-rounded {
            border-radius: 8px;
        }
    </style>
}

@section Scripts {
    <!-- Add GSAP Library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.12.2/gsap.min.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const svg = document.getElementById('interactive-svg');
            const svgContainer = document.getElementById('animated-svg-container');
            const personCircles = document.querySelectorAll('.person-circle');
            const connectionLines = document.querySelectorAll('.connection-line');
            const centerCircle = document.querySelector('.st1.svg-element:first-of-type');
            const whiteCircle = document.querySelector('.st5.svg-element');
            
            // Original positions for reset
            const originalPositions = [
                { cx: 315, cy: 230 },
                { cx: 485, cy: 230 },
                { cx: 315, cy: 370 },
                { cx: 485, cy: 370 }
            ];
            
            // Store original line positions
            const originalLines = [
                { x1: 315, y1: 230, x2: 485, y2: 230 },
                { x1: 315, y1: 230, x2: 315, y2: 370 },
                { x1: 315, y1: 370, x2: 485, y2: 370 },
                { x1: 485, y1: 230, x2: 485, y2: 370 },
                { x1: 315, y1: 230, x2: 485, y2: 370 },
                { x1: 485, y1: 230, x2: 315, y2: 370 }
            ];
            
            // Initial animation for elements when page loads
            gsap.from(personCircles, {
                scale: 0,
                duration: 0.8,
                ease: "elastic.out(1, 0.5)",
                stagger: 0.1
            });
            
            gsap.from(connectionLines, {
                attr: { "stroke-width": 0 },
                opacity: 0,
                duration: 1,
                ease: "power2.inOut",
                stagger: 0.05,
                delay: 0.4
            });
            
            gsap.from([centerCircle, whiteCircle], {
                attr: { r: 0 },
                duration: 1.2,
                ease: "power2.out",
                delay: 0.2
            });
            
            // Initialize variables for tracking animation
            let activeGlow = null;
            let isDragging = false;
            let lastMouseX = 0;
            let lastMouseY = 0;
            
            // Optimization: debounce function to limit the rate of animation updates
            function debounce(func, wait = 10) {
                let timeout;
                return function() {
                    const context = this;
                    const args = arguments;
                    clearTimeout(timeout);
                    timeout = setTimeout(() => func.apply(context, args), wait);
                };
            }
            
            // Map mouse position to SVG coordinates
            function getMousePosition(evt) {
                const svgRect = svgContainer.getBoundingClientRect();
                return {
                    x: (evt.clientX - svgRect.left) / svgRect.width * 800,
                    y: (evt.clientY - svgRect.top) / svgRect.height * 600
                };
            }
            
            // Update connection lines (optimized)
            function updateConnectedLines(circle, newX, newY) {
                const originalCx = originalPositions[Array.from(personCircles).indexOf(circle)].cx;
                const originalCy = originalPositions[Array.from(personCircles).indexOf(circle)].cy;
                
                connectionLines.forEach((line, i) => {
                    const lineData = originalLines[i];
                    
                    if (lineData.x1 === originalCx && lineData.y1 === originalCy) {
                        line.setAttribute('x1', newX);
                        line.setAttribute('y1', newY);
                    }
                    
                    if (lineData.x2 === originalCx && lineData.y2 === originalCy) {
                        line.setAttribute('x2', newX);
                        line.setAttribute('y2', newY);
                    }
                });
            }
            
            // Create a single timeline for smooth animations
            const mouseMoveTimeline = gsap.timeline({ paused: true });
            
            // Animate circles based on mouse position (move this to document level)
            document.addEventListener('mousemove', function(e) {
                if (isDragging) return;
                
                // Store last mouse position for global use
                lastMouseX = e.clientX;
                lastMouseY = e.clientY;
                
                // Get SVG container position
                const svgRect = svgContainer?.getBoundingClientRect();
                
                if (!svgRect) return; // Exit if the element isn't available
                
                // Check if we're close enough to the SVG to animate
                const distanceToSvg = Math.min(
                    Math.abs(e.clientX - svgRect.left),
                    Math.abs(e.clientX - svgRect.right),
                    Math.abs(e.clientY - svgRect.top),
                    Math.abs(e.clientY - svgRect.bottom)
                );
                
                // If we're far away, use reduced influence
                const influenceFactor = distanceToSvg > 500 ? 0.2 : 
                                       distanceToSvg > 300 ? 0.5 : 
                                       distanceToSvg > 100 ? 0.8 : 1;
                
                const mousePos = {
                    x: ((e.clientX - svgRect.left) / svgRect.width) * 800,
                    y: ((e.clientY - svgRect.top) / svgRect.height) * 600
                };
                
                // Only process if mouse is reasonably close to SVG
                if (distanceToSvg < 1000) {
                    // Rest of animation code...
                    // Reset timeline
                    mouseMoveTimeline.clear();
                    
                    // Process each circle
                    personCircles.forEach((circle, index) => {
                        const cx = parseFloat(circle.getAttribute('cx'));
                        const cy = parseFloat(circle.getAttribute('cy'));
                        
                        // Calculate direction vector
                        const dx = mousePos.x - cx;
                        const dy = mousePos.y - cy;
                        
                        // Distance and magnitude calculation
                        const distance = Math.sqrt(dx*dx + dy*dy);
                        const maxMove = 15 * influenceFactor;
                        
                        if (distance > 0) {
                            const moveX = (dx / distance) * Math.min(maxMove, distance/8);
                            const moveY = (dy / distance) * Math.min(maxMove, distance/8);
                            
                            const newX = cx + moveX;
                            const newY = cy + moveY;
                            
                            // Add to timeline (using direct attribute setting for performance)
                            mouseMoveTimeline.to(circle, {
                                attr: { cx: newX, cy: newY },
                                duration: 0.4,
                                ease: "power1.out",
                                onUpdate: function() {
                                    if (this.progress() === 1) { // Only update at end of tween
                                        updateConnectedLines(
                                            circle,
                                            parseFloat(circle.getAttribute('cx')),
                                            parseFloat(circle.getAttribute('cy'))
                                        );
                                    }
                                }
                            }, 0); // Start all at the same time
                        }
                    });
                    
                    // Add center circle pulse to timeline
                    const centerX = 400;
                    const centerY = 300;
                    const distanceFromCenter = Math.sqrt(Math.pow(mousePos.x - centerX, 2) + Math.pow(mousePos.y - centerY, 2));
                    const maxDistance = 400;
                    // Smoother pulse calculation with reduced effect
                    const pulseScale = 1 + (0.08 * (1 - Math.min(distanceFromCenter, maxDistance) / maxDistance) * influenceFactor);
                    
                    mouseMoveTimeline.to([centerCircle, whiteCircle], {
                        attr: { 
                            r: (i) => i === 0 ? 150 * pulseScale : 120 * pulseScale 
                        },
                        duration: 0.5,
                        ease: "sine.out"
                    }, 0);
                    
                    // Find nearest circle for glow effect
                    let minDistance = Infinity;
                    let nearestCircle = null;
                    
                    personCircles.forEach(circle => {
                        const cx = parseFloat(circle.getAttribute('cx'));
                        const cy = parseFloat(circle.getAttribute('cy'));
                        const dist = Math.sqrt(Math.pow(mousePos.x - cx, 2) + Math.pow(mousePos.y - cy, 2));
                        
                        if (dist < minDistance) {
                            minDistance = dist;
                            nearestCircle = circle;
                        }
                    });
                    
                    // Apply glow to nearest circle if close enough
                    if (nearestCircle !== activeGlow && minDistance < 300) {
                        if (activeGlow) {
                            mouseMoveTimeline.to(activeGlow, {
                                attr: { filter: '' },
                                duration: 0.3
                            }, 0);
                        }
                        
                        activeGlow = nearestCircle;
                        
                        mouseMoveTimeline.to(nearestCircle, {
                            attr: { filter: 'drop-shadow(0 0 8px rgba(255,255,255,0.8))' },
                            duration: 0.3
                        }, 0);
                    } else if (minDistance >= 300 && activeGlow) {
                        mouseMoveTimeline.to(activeGlow, {
                            attr: { filter: '' },
                            duration: 0.3
                        }, 0);
                        activeGlow = null;
                    }
                    
                    // Play the timeline
                    mouseMoveTimeline.play(0);
                }
            });
            
            // Add click animations for circles
            personCircles.forEach(circle => {
                circle.addEventListener('click', function() {
                    const origR = parseFloat(circle.getAttribute('r'));
                    
                    // Create pulse animation with GSAP
                    gsap.timeline()
                        .to(circle, {
                            attr: { r: origR * 1.3 },
                            duration: 0.2,
                            ease: "power2.out"
                        })
                        .to(circle, {
                            attr: { r: origR },
                            duration: 0.5,
                            ease: "elastic.out(1.2, 0.5)"
                        });
                    
                    // Add ripple effect
                    const ripple = document.createElementNS("http://www.w3.org/2000/svg", "circle");
                    ripple.setAttribute("cx", circle.getAttribute("cx"));
                    ripple.setAttribute("cy", circle.getAttribute("cy"));
                    ripple.setAttribute("r", origR);
                    ripple.setAttribute("fill", "none");
                    ripple.setAttribute("stroke", circle.getAttribute("fill"));
                    ripple.setAttribute("stroke-width", "2");
                    ripple.setAttribute("opacity", "0.7");
                    svg.appendChild(ripple);
                    
                    gsap.to(ripple, {
                        attr: { r: origR * 3 },
                        opacity: 0,
                        duration: 0.8,
                        ease: "power2.out",
                        onComplete: function() {
                            svg.removeChild(ripple);
                        }
                    });
                });
            });
            
            // Make circles draggable
            personCircles.forEach(circle => {
                let startX, startY, circleX, circleY;
                
                circle.addEventListener('mousedown', startDrag);
                circle.addEventListener('touchstart', startDrag);
                
                function startDrag(e) {
                    e.preventDefault();
                    isDragging = true;
                    
                    // Kill any active GSAP animations for this circle
                    gsap.killTweensOf(circle);
                    
                    const event = e.type === 'touchstart' ? e.touches[0] : e;
                    const svgRect = svgContainer.getBoundingClientRect();
                    const mouseX = ((event.clientX - svgRect.left) / svgRect.width) * 800;
                    const mouseY = ((event.clientY - svgRect.top) / svgRect.height) * 600;
                    
                    startX = mouseX;
                    startY = mouseY;
                    circleX = parseFloat(circle.getAttribute('cx'));
                    circleY = parseFloat(circle.getAttribute('cy'));
                    
                    document.addEventListener('mousemove', drag);
                    document.addEventListener('touchmove', drag);
                    document.addEventListener('mouseup', endDrag);
                    document.addEventListener('touchend', endDrag);
                }
                
                function drag(e) {
                    if (!isDragging) return;
                    
                    const event = e.type === 'touchmove' ? e.touches[0] : e;
                    const svgRect = svgContainer.getBoundingClientRect();
                    const mouseX = ((event.clientX - svgRect.left) / svgRect.width) * 800;
                    const mouseY = ((event.clientY - svgRect.top) / svgRect.height) * 600;
                    
                    const newX = circleX + (mouseX - startX);
                    const newY = circleY + (mouseY - startY);
                    
                    // Direct DOM manipulation for better performance during drag
                    circle.setAttribute('cx', newX);
                    circle.setAttribute('cy', newY);
                    updateConnectedLines(circle, newX, newY);
                }
                
                function endDrag() {
                    isDragging = false;
                    document.removeEventListener('mousemove', drag);
                    document.removeEventListener('touchmove', drag);
                    document.removeEventListener('mouseup', endDrag);
                    document.removeEventListener('touchend', endDrag);
                    
                    // Animate back to original position
                    const index = Array.from(personCircles).indexOf(circle);
                    gsap.to(circle, {
                        attr: {
                            cx: originalPositions[index].cx,
                            cy: originalPositions[index].cy
                        },
                        duration: 0.7,
                        ease: "elastic.out(1, 0.5)",
                        onUpdate: function() {
                            updateConnectedLines(
                                circle, 
                                parseFloat(circle.getAttribute('cx')), 
                                parseFloat(circle.getAttribute('cy'))
                            );
                        }
                    });
                }
            });
        });
    </script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Get SVG elements
            const workspace = document.querySelector('.workspace');
            const persons = document.querySelectorAll('.person');
            const document = document.querySelector('.document');
            const chart = document.querySelector('.chart');
            const taskCard = document.querySelector('.task-card');
            const connections = document.querySelectorAll('.connection');
            const progressBar = document.querySelector('.progress-bar');
            const notifications = document.querySelectorAll('.notification');
            const avatars = document.querySelectorAll('.avatar');
            const svg = document.getElementById('interactive-svg');
            const svgContainer = document.getElementById('animated-svg-container');
            
            // Create main timeline for initial animation
            const mainTimeline = gsap.timeline();
            
            // Initial animation
            mainTimeline
                .from(workspace, {
                    scale: 0.8,
                    opacity: 0,
                    duration: 1,
                    ease: "power3.out"
                })
                .from(persons, {
                    scale: 0,
                    opacity: 0,
                    stagger: 0.1,
                    duration: 0.6,
                    ease: "back.out(1.7)"
                }, "-=0.5")
                .fromTo(connections, {
                    strokeDasharray: 200,
                    strokeDashoffset: 200
                }, {
                    strokeDashoffset: 0,
                    duration: 1.2,
                    stagger: 0.1,
                    ease: "power2.inOut"
                }, "-=0.3")
                .from([document, chart], {
                    y: 30,
                    opacity: 0,
                    stagger: 0.2,
                    duration: 0.8,
                    ease: "power2.out"
                }, "-=0.8")
                .from(taskCard, {
                    y: 30,
                    opacity: 0,
                    duration: 0.8,
                    ease: "power2.out"
                }, "-=0.4")
                .fromTo(progressBar, {
                    scaleX: 0,
                }, {
                    scaleX: 1,
                    duration: 1,
                    ease: "power2.inOut"
                }, "-=0.2");
                
            // Create repeating animations for UI elements
            function createRepeatingAnimations() {
                // Subtle breathing effect for workspace
                gsap.to(workspace, {
                    scale: 1.01,
                    duration: 3,
                    repeat: -1,
                    yoyo: true,
                    ease: "sine.inOut"
                });
                
                // Person hover effect in sequence
                gsap.to(persons, {
                    y: -5,
                    duration: 1.5,
                    stagger: {
                        each: 0.5,
                        repeat: -1,
                        yoyo: true
                    },
                    ease: "sine.inOut"
                });
                
                // Rotating notifications
                const notificationTimeline = gsap.timeline({repeat: -1, repeatDelay: 2});
                notifications.forEach((notification, i) => {
                    notificationTimeline
                        .to(notification, {
                            opacity: 1,
                            y: 10,
                            duration: 0.5,
                            ease: "back.out"
                        })
                        .to(notification, {
                            opacity: 0,
                            y: -10,
                            duration: 0.5,
                            delay: 1.5,
                            ease: "power2.in"
                        }, "+=1.5");
                });
                
                // Subtle avatar pulse
                gsap.to(avatars, {
                    scale: 1.2,
                    opacity: 0.5,
                    duration: 1.5,
                    stagger: {
                        each: 0.3,
                        repeat: -1,
                        yoyo: true
                    },
                    ease: "sine.inOut"
                });
            }
            
            // Start repeating animations after main timeline completes
            mainTimeline.call(createRepeatingAnimations);
            
            // Variables for tracking mouse movement
            let mouseX = 0;
            let mouseY = 0;
            let active = false;
            let frameId = null;
            
            // Mouse movement tracking
            svgContainer.addEventListener('mousemove', function(e) {
                const rect = svgContainer.getBoundingClientRect();
                mouseX = ((e.clientX - rect.left) / rect.width) - 0.5; // -0.5 to 0.5 range
                mouseY = ((e.clientY - rect.top) / rect.height) - 0.5; // -0.5 to 0.5 range
                active = true;
                
                // If no animation frame is running, start one
                if (!frameId) {
                    frameId = requestAnimationFrame(animateElements);
                }
            });
            
            // Mouse leave handling
            svgContainer.addEventListener('mouseleave', function() {
                active = false;
                
                // Animate all elements back to center
                gsap.to(workspace, {
                    x: 0,
                    y: 0,
                    duration: 0.8,
                    ease: "power2.out"
                });
                
                gsap.to([document, chart], {
                    x: 0,
                    y: 0,
                    duration: 0.7,
                    ease: "power2.out"
                });
                
                gsap.to(taskCard, {
                    x: 0,
                    y: 0,
                    duration: 0.7,
                    ease: "power2.out"
                });
                
                gsap.to(persons, {
                    x: 0,
                    y: 0,
                    duration: 0.8,
                    ease: "elastic.out(0.5, 0.3)"
                });
            });
            
            // Animate elements based on mouse position
            function animateElements() {
                if (active) {
                    // Movement multipliers for different elements (less movement = more stable feeling)
                    const workspaceMove = 15;
                    const documentMove = 8;
                    const personMove = 6;
                    
                    // Calculate new positions with easing
                    const easeAmount = 0.08; // Lower = smoother/slower follow
                    
                    // Move workspace slightly (feels like 3D perspective)
                    gsap.to(workspace, {
                        x: mouseX * workspaceMove, 
                        y: mouseY * workspaceMove,
                        duration: 0.5,
                        ease: "power2.out"
                    });
                    
                    // Move document and chart opposite to workspace (parallax effect)
                    gsap.to([document, chart], {
                        x: mouseX * -documentMove,
                        y: mouseY * -documentMove,
                        duration: 0.6,
                        ease: "power2.out"
                    });
                    
                    // Move task card with slight delay
                    gsap.to(taskCard, {
                        x: mouseX * documentMove,
                        y: mouseY * documentMove,
                        duration: 0.7,
                        ease: "power2.out"
                    });
                    
                    // Move person circles more dynamically
                    persons.forEach((person, i) => {
                        // Alternate directions for different persons to create interesting motion
                        const xDirection = i % 2 === 0 ? 1 : -1;
                        const yDirection = i < 3 ? 1 : -1;
                        
                        gsap.to(person, {
                            x: mouseX * personMove * xDirection,
                            y: mouseY * personMove * yDirection,
                            duration: 0.3,
                            ease: "power1.out"
                        });
                    });
                    
                    // Continue animation frame
                    frameId = requestAnimationFrame(animateElements);
                } else {
                    // Stop animation frame when not active
                    frameId = null;
                }
            }
            
            // Add click interactions for person circles
            persons.forEach(person => {
                person.addEventListener('click', function() {
                    const originalR = parseFloat(this.getAttribute('r'));
                    
                    // Click animation
                    gsap.timeline()
                        .to(this, {
                            scale: 1.3,
                            duration: 0.2,
                            ease: "power1.out"
                        })
                        .to(this, {
                            scale: 1,
                            duration: 0.5,
                            ease: "elastic.out(1.2, 0.5)"
                        });
                    
                    // Create ripple effect
                    const ripple = document.createElementNS("http://www.w3.org/2000/svg", "circle");
                    ripple.setAttribute("cx", this.getAttribute("cx"));
                    ripple.setAttribute("cy", this.getAttribute("cy"));
                    ripple.setAttribute("r", originalR);
                    ripple.setAttribute("fill", "none");
                    ripple.setAttribute("stroke", this.getAttribute("fill"));
                    ripple.setAttribute("stroke-width", "2");
                    ripple.setAttribute("opacity", "0.7");
                    svg.appendChild(ripple);
                    
                    gsap.to(ripple, {
                        r: originalR * 3,
                        opacity: 0,
                        duration: 0.8,
                        ease: "power2.out",
                        onComplete: function() {
                            svg.removeChild(ripple);
                        }
                    });
                });
                
                // Hover effect for person circles
                person.addEventListener('mouseenter', function() {
                    gsap.to(this, {
                        scale: 1.15,
                        opacity: 1,
                        duration: 0.3,
                        ease: "power1.out"
                    });
                });
                
                person.addEventListener('mouseleave', function() {
                    gsap.to(this, {
                        scale: 1,
                        opacity: 0.8,
                        duration: 0.3,
                        ease: "power1.out"
                    });
                });
            });
        });
    </script>
}