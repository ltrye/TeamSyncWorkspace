@page
@using System.Security.Claims
@using TeamSyncWorkspace.Services
@model TeamSyncWorkspace.Pages.Teams.Roles.IndexModel
@{
    ViewData["Title"] = "Team Roles Management";
}

<div class="container is-fluid">
    <div class="section pt-4 pb-2">
        <div class="level">
            <div class="level-left">
                <div class="level-item">
                    <div>
                        <nav class="breadcrumb" aria-label="breadcrumbs">
                            <ul>
                                <li><a asp-page="/Teams/Index">My Teams</a></li>
                                <li><a asp-page="/Dashboard/Index" asp-route-teamId="@Model.Team.TeamId">@Model.Team.TeamName</a></li>
                                <li class="is-active"><a href="#" aria-current="page">Roles Management</a></li>
                            </ul>
                        </nav>
                        <h1 class="title is-3">@Model.Team.TeamName</h1>
                        <p class="subtitle is-6 has-text-grey">Roles Management</p>
                    </div>
                </div>
            </div>
        </div>
        
        @if (!string.IsNullOrEmpty(Model.StatusMessage))
        {
            <div class="notification @(Model.StatusMessage.Contains("success") ? "is-success is-light" : "is-danger is-light")">
                <button class="delete"></button>
                @Model.StatusMessage
            </div>
        }
    </div>

    <div class="columns">
        <!-- Team Members Column -->
        <div class="column is-6">
            <div class="box has-shadow p-0">
                <div class="p-4 has-background-white-bis">
                    <p class="title is-5 mb-0">Team Members</p>
                </div>
                <div class="table-container">
                    <table class="table is-fullwidth is-hoverable">
                        <thead>
                            <tr>
                                <th>Member</th>
                                <th>Role</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var member in Model.TeamMembers)
                            {
                               <tr>
                                <td>
                                    <div class="is-flex is-align-items-center">
                                        <img src="https://ui-avatars.com/api/?name=@(Uri.EscapeDataString($"{member.User.FirstName} {member.User.LastName}"))&size=32&background=E5E5E5&color=707070" 
                                            class="image is-32x32 is-rounded mr-3" alt="Avatar" />
                                        <div>
                                            <p class="has-text-weight-medium mb-0">@member.User.FirstName @member.User.LastName</p>
                                            <p class="has-text-grey is-size-7 mb-0">@member.User.Email</p>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <span class="tag @(member.Role == "Owner" ? "is-danger" : 
                                                    member.Role == "Admin" ? "is-warning" :
                                                    member.Role == "Member" ? "is-info" : 
                                                    member.Role == "Viewer" ? "is-light" : "is-info") is-light">
                                        @member.Role
                                    </span>
                                </td>
    <td>
        @if (Model.CanManageRoles && (member.Role != "Owner" || member.UserId == int.Parse(User.FindFirst(ClaimTypes.NameIdentifier).Value)))
        {
            <button class="button is-small is-info is-light js-modal-trigger" 
                    data-target="changeRoleModal" 
                    data-user-id="@member.UserId" 
                    data-user-name="@member.User.FirstName @member.User.LastName"
                    data-current-role="@member.Role">
                <span class="icon is-small">
                    <i class="bi bi-pencil"></i>
                </span>
                <span>Change Role</span>
            </button>
        }
    </td>
</tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Roles Column -->
        <div class="column is-6">
            <div class="box has-shadow p-0">
                <div class="p-4 has-background-white-bis is-flex is-justify-content-space-between is-align-items-center">
                    <p class="title is-5 mb-0">Available Roles</p>
                    @if (Model.CanManageRoles)
                    {
                        <button class="button is-small is-info is-light js-modal-trigger" data-target="createRoleModal">
                            <span class="icon is-small">
                                <i class="bi bi-plus-circle"></i>
                            </span>
                            <span>Create Custom Role</span>
                        </button>
                    }
                </div>
                
                @foreach (var role in Model.Roles)
                {
                    <div class="role-panel">
                        <div class="role-header px-4 py-3 is-flex is-justify-content-space-between is-align-items-center" data-role-target="role-panel-@role.RoleId">
                            <div>
                                <span class="tag @(role.Name == "Owner" ? "is-danger" : 
                                        role.Name == "Admin" ? "is-warning" :
                                        role.Name == "Member" ? "is-info" : 
                                        role.Name == "Viewer" ? "is-light" : "is-info") is-light mr-2">
                                    @role.Name
                                </span>
                                <span>@role.Description</span>
                            </div>
                            <div class="is-flex is-align-items-center">
                                <span class="tag is-light mr-3">@(role.Permissions?.Count ?? 0) permissions</span>
                                <span class="icon role-toggle">
                                    <i class="bi bi-chevron-down"></i>
                                </span>
                            </div>
                        </div>
                        <div class="role-body px-4 py-3" id="role-panel-@role.RoleId" style="display: none;">
                            <div class="is-flex is-justify-content-space-between mb-3">
                                <p class="has-text-weight-medium">Permissions</p>
                                @if (Model.CanManageRoles && role.Name != "Owner" && role.Name != "Admin" && role.Name != "Member" && role.Name != "Viewer")
                                {
                                    <div>
                                        <button type="button" class="button is-small is-info is-light mr-2 js-modal-trigger" 
                                                data-target="editRoleModal" 
                                                data-role-id="@role.RoleId" 
                                                data-role-name="@role.Name" 
                                                data-role-description="@role.Description"
                                                data-role-permissions="@string.Join(",", role.Permissions.Select(p => p.Action))">
                                            <span class="icon is-small">
                                                <i class="bi bi-pencil"></i>
                                            </span>
                                            <span>Edit</span>
                                        </button>
                                        <button type="button" class="button is-small is-danger is-light js-modal-trigger" 
                                                data-target="deleteRoleModal" 
                                                data-role-id="@role.RoleId" 
                                                data-role-name="@role.Name">
                                            <span class="icon is-small">
                                                <i class="bi bi-trash"></i>
                                            </span>
                                            <span>Delete</span>
                                        </button>
                                    </div>
                                }
                            </div>
                            <div class="columns is-multiline">
                                @foreach (var permission in role.Permissions)
                                {
                                    <div class="column is-6">
                                        <div class="box has-background-light p-2 mb-2">
                                            <p class="is-size-7 mb-0">@permission.Action</p>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@if (Model.CanManageRoles)
{
    <!-- Create Custom Role Modal -->
    <div class="modal" id="createRoleModal">
        <div class="modal-background"></div>
        <div class="modal-card" style="width: 80%;">
            <form method="post" asp-page-handler="CreateRole" asp-route-teamId="@Model.Team.TeamId">
                <header class="modal-card-head">
                    <p class="modal-card-title">Create Custom Role</p>
                    <button type="button" class="delete" aria-label="close"></button>
                </header>
                <section class="modal-card-body">
                    <div class="field">
                        <label class="label" for="roleName">Role Name</label>
                        <div class="control">
                            <input type="text" class="input" id="roleName" name="CustomRole.Name" required maxlength="30">
                        </div>
                        <p class="help">Choose a descriptive name for this role (e.g., "Project Manager", "Content Editor")</p>
                    </div>
                    <div class="field mb-5">
                        <label class="label" for="roleDescription">Description</label>
                        <div class="control">
                            <input type="text" class="input" id="roleDescription" name="CustomRole.Description" required maxlength="100">
                        </div>
                    </div>
                    
                    <div class="field">
                        <label class="label">Permissions</label>
                        <div class="columns is-multiline">
                            @foreach (var permission in Model.AvailablePermissions)
                            {
                                <div class="column is-6">
                                    <div class="field">
                                        <div class="control">
                                            <label class="checkbox">
                                                <input type="checkbox" name="CustomRole.Permissions" value="@permission.action">
                                                <strong>@permission.action</strong>
                                                <p class="help">@permission.description</p>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </section>
                <footer class="modal-card-foot">
                    <button type="submit" class="button is-info">Create Role</button>
                    <button type="button" class="button is-light">Cancel</button>
                </footer>
            </form>
        </div>
    </div>

    <!-- Edit Role Modal -->
    <div class="modal" id="editRoleModal">
        <div class="modal-background"></div>
        <div class="modal-card" style="width: 80%;">
            <form method="post" asp-page-handler="UpdateRole" asp-route-teamId="@Model.Team.TeamId">
                <input type="hidden" id="editRoleId" name="roleId" value="">
                <header class="modal-card-head">
                    <p class="modal-card-title">Edit Role</p>
                    <button type="button" class="delete" aria-label="close"></button>
                </header>
                <section class="modal-card-body">
                    <div class="field">
                        <label class="label" for="editRoleName">Role Name</label>
                        <div class="control">
                            <input type="text" class="input" id="editRoleName" name="CustomRole.Name" required maxlength="30">
                        </div>
                    </div>
                    <div class="field mb-5">
                        <label class="label" for="editRoleDescription">Description</label>
                        <div class="control">
                            <input type="text" class="input" id="editRoleDescription" name="CustomRole.Description" required maxlength="100">
                        </div>
                    </div>
                    
                    <div class="field">
                        <label class="label">Permissions</label>
                        <div class="columns is-multiline">
                            @foreach (var permission in Model.AvailablePermissions)
                            {
                                <div class="column is-6">
                                    <div class="field">
                                        <div class="control">
                                            <label class="checkbox">
                                                <input class="edit-permission" type="checkbox" id="edit_perm_@permission.action" name="CustomRole.Permissions" value="@permission.action">
                                                <strong>@permission.action</strong>
                                                <p class="help">@permission.description</p>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </section>
                <footer class="modal-card-foot">
                    <button type="submit" class="button is-info">Save Changes</button>
                    <button type="button" class="button is-light">Cancel</button>
                </footer>
            </form>
        </div>
    </div>

    <!-- Delete Role Modal -->
    <div class="modal" id="deleteRoleModal">
        <div class="modal-background"></div>
        <div class="modal-card">
            <form method="post" asp-page-handler="DeleteRole" asp-route-teamId="@Model.Team.TeamId">
                <input type="hidden" id="deleteRoleId" name="roleId" value="">
                <header class="modal-card-head">
                    <p class="modal-card-title">Delete Role</p>
                    <button type="button" class="delete" aria-label="close"></button>
                </header>
                <section class="modal-card-body">
                    <p>Are you sure you want to delete the role <strong id="deleteRoleName"></strong>?</p>
                    <p class="has-text-danger">This action cannot be undone. This role will be permanently deleted.</p>
                    <p class="is-italic">Note: You cannot delete a role that is currently assigned to team members.</p>
                </section>
                <footer class="modal-card-foot">
                    <button type="submit" class="button is-danger">Delete Role</button>
                    <button type="button" class="button is-light">Cancel</button>
                </footer>
            </form>
        </div>
    </div>

    <!-- Change Role Modal -->
    <div class="modal" id="changeRoleModal">
        <div class="modal-background"></div>
        <div class="modal-card">
            <form method="post" asp-page-handler="ChangeRole" asp-route-teamId="@Model.Team.TeamId">
                <input type="hidden" id="changeRoleUserId" name="userId" value="">
                <input type="hidden" id="changeRoleTeamId" name="teamId" value="@Model.Team.TeamId">
                
                <header class="modal-card-head">
                    <p class="modal-card-title">Change User Role</p>
                    <button type="button" class="delete" aria-label="close"></button>
                </header>
                
                <section class="modal-card-body">
                    <p>You are changing the role for <strong id="changeRoleUserName"></strong>.</p>
                    <p>Current role: <span class="tag" id="changeRoleCurrentRole"></span></p>
                    
                    <!-- Ownership Transfer Alert - Add this block -->
                    <div id="ownershipTransferAlert" class="notification is-warning is-light mt-3" style="display: none;">
                        <div class="mb-2">
                            <span class="icon is-medium">
                                <i class="bi bi-exclamation-triangle-fill"></i>
                            </span>
                            <span class="has-text-weight-bold">Ownership Transfer</span>
                        </div>
                        <p>You are about to transfer ownership of this team. Please note:</p>
                        <ul class="ml-5 mt-2">
                            <li>Your role will be changed to <strong>Admin</strong></li>
                            <li>The new owner will have full control over the team</li>
                            <li>The new owner can remove your admin privileges</li>
                        </ul>
                    </div>
                    
                    <div class="field mt-5">
                        <label class="label">Select New Role</label>
                        <div class="control">
                            <div class="select is-fullwidth">
                                <select name="newRole" id="changeRoleSelect">
                                    @foreach (var role in Model.Roles)
                                    {
                                        <option value="@role.Name">@role.Name</option>
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    
                    <div class="notification is-info is-light mt-4">
                        <p class="mb-2"><strong>About this role:</strong></p>
                        <div id="roleDescriptionContainer"></div>
                    </div>
                    
                    <div class="mt-3">
                        <p class="has-text-weight-medium mb-2">Permissions in this role:</p>
                        <div class="tags" id="rolePermissionTags"></div>
                    </div>
                </section>
                
                <footer class="modal-card-foot">
    <button type="submit" class="button is-info" id="changeRoleSubmitButton">Change Role</button>
    <button type="button" class="button is-light">Cancel</button>
</footer>
            </form>
        </div>
    </div>
}

@section Styles {
    <style>
        .role-panel {
            border-bottom: 1px solid #f5f5f5;
        }
        .role-panel:last-child {
            border-bottom: none;
        }
        .role-header {
            cursor: pointer;
            transition: background-color 0.2s ease;
        }
        .role-header:hover {
            background-color: #f9f9f9;
        }
        .role-toggle {
            transition: transform 0.2s ease;
        }
        .role-toggle.is-active {
            transform: rotate(180deg);
        }
    </style>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Notification delete functionality
            (document.querySelectorAll('.notification .delete') || []).forEach(($delete) => {
                const $notification = $delete.parentNode;
                $delete.addEventListener('click', () => {
                    $notification.parentNode.removeChild($notification);
                });
            });
            
            // Role panel toggle functionality
            (document.querySelectorAll('.role-header') || []).forEach(($header) => {
                $header.addEventListener('click', () => {
                    const targetId = $header.getAttribute('data-role-target');
                    const $target = document.getElementById(targetId);
                    const $icon = $header.querySelector('.role-toggle');
                    
                    if ($target.style.display === 'none') {
                        $target.style.display = 'block';
                        $icon.classList.add('is-active');
                    } else {
                        $target.style.display = 'none';
                        $icon.classList.remove('is-active');
                    }
                });
            });
            
            // Modal functionality
            function openModal($el) {
                $el.classList.add('is-active');
            }

            function closeModal($el) {
                $el.classList.remove('is-active');
            }

            function closeAllModals() {
                (document.querySelectorAll('.modal') || []).forEach(($modal) => {
                    closeModal($modal);
                });
            }

            // Open modal triggers
            (document.querySelectorAll('.js-modal-trigger') || []).forEach(($trigger) => {
                const modal = $trigger.dataset.target;
                const $target = document.getElementById(modal);

                $trigger.addEventListener('click', () => {
                    // For change role modal
                    if (modal === 'changeRoleModal') {
                        const userId = $trigger.dataset.userId;
                        const userName = $trigger.dataset.userName;
                        const currentRole = $trigger.dataset.currentRole;
                        const currentUserId = '@User.FindFirst(ClaimTypes.NameIdentifier)?.Value';
                        
                        document.getElementById('changeRoleUserId').value = userId;
                        document.getElementById('changeRoleUserName').textContent = userName;
                        
                        // Set current role tag color
                        const currentRoleTag = document.getElementById('changeRoleCurrentRole');
                        currentRoleTag.textContent = currentRole;
                        currentRoleTag.className = "tag " + getRoleColorClass(currentRole);
                        
                        // Select dropdown - exclude current role
                        const roleSelect = document.getElementById('changeRoleSelect');
                        roleSelect.innerHTML = '';
                        
                        @foreach (var role in Model.Roles)
                        {
                            <text>
                            if ('@role.Name' !== currentRole) {
                                const option = document.createElement('option');
                                option.value = '@role.Name';
                                option.textContent = '@role.Name';
                                roleSelect.appendChild(option);
                            }
                            </text>
                        }
                        
                        // Update role description and permissions based on initial selection
                        updateRoleDetails(roleSelect.value);
                        
                        // Check for ownership transfer
                        const ownershipTransferAlert = document.getElementById('ownershipTransferAlert');
                        const submitButton = document.querySelector('#changeRoleModal .modal-card-foot .button.is-info');
                        
                        // Function to check and show/hide ownership transfer alert
                        function checkOwnershipTransfer() {
                            // Show ownership transfer warning if:
                            // 1. Current user is the owner (based on currentRole)
                            // 2. Current user is changing someone else's role (userId != currentUserId)
                            // 3. New role is Owner
                            const isCurrentUserOwner = currentRole === '@TeamRoleManagementService.Roles.Owner' && 
                                                       userId === currentUserId;
                            
                            const isTransferringOwnership = isCurrentUserOwner && 
                                                          roleSelect.value === '@TeamRoleManagementService.Roles.Owner';
                                                          
                            const isOtherUserBecomingOwner = currentUserId !== userId && 
                                                            roleSelect.value === '@TeamRoleManagementService.Roles.Owner';
                            
                            // Show warning if owner is making someone else an owner
                            if (currentRole === '@TeamRoleManagementService.Roles.Owner' && 
                                userId !== currentUserId && 
                                roleSelect.value === '@TeamRoleManagementService.Roles.Owner') {
                                
                                ownershipTransferAlert.style.display = 'block';
                                submitButton.textContent = 'Transfer Ownership';
                                submitButton.className = 'button is-warning';
                            } else {
                                ownershipTransferAlert.style.display = 'none';
                                submitButton.textContent = 'Change Role';
                                submitButton.className = 'button is-info';
                            }
                        }
                        
                        // Initial check
                        checkOwnershipTransfer();
                        
                        // Add change event listener to check ownership transfer when role changes
                        roleSelect.addEventListener('change', function() {
                            updateRoleDetails(this.value);
                            checkOwnershipTransfer();
                        });
                    }
                    
                    /* Your existing code for other modals */
                    
                    openModal($target);
                });
            });

            // Helper function to get role color class
            function getRoleColorClass(roleName) {
                switch(roleName) {
                    case 'Owner': return 'is-danger is-light';
                    case 'Admin': return 'is-warning is-light';
                    case 'Member': return 'is-info is-light';
                    case 'Viewer': return 'is-light';
                    default: return 'is-info is-light';
                }
            }

            // Function to update role details in the modal
            function updateRoleDetails(roleName) {
                const descriptionContainer = document.getElementById('roleDescriptionContainer');
                const permissionTags = document.getElementById('rolePermissionTags');
                
                // Clear previous content
                descriptionContainer.innerHTML = '';
                permissionTags.innerHTML = '';
                
                // Role details lookup object
                const roleDetails = {
                    @foreach (var role in Model.Roles)
                    {
                        <text>
                        '@role.Name': {
                            description: '@role.Description',
                            permissions: [@foreach (var perm in role.Permissions) { <text>'@perm.Action',</text> }]
                        },
                        </text>
                    }
                };
                
                // Update description
                const description = roleDetails[roleName]?.description || '';
                descriptionContainer.textContent = description;
                
                // Update permission tags
                const permissions = roleDetails[roleName]?.permissions || [];
                permissions.forEach(permission => {
                    const tag = document.createElement('span');
                    tag.className = 'tag is-light';
                    tag.textContent = permission;
                    permissionTags.appendChild(tag);
                });
            }
        });
    </script>
}